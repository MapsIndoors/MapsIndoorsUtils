import java.text.SimpleDateFormat

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'


ext{
    mVersionName = "0.1.0"
}

beforeEvaluate {
    print project.properties.toString()
}

android {
    compileSdkVersion 27
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName mVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'org.jetbrains:annotations-java5:15.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}

task setTag {
    doFirst {
        mVersionName = myTag
        project.version(myTag)
        project.logger.lifecycle("mVersionName is = " + mVersionName + "& myTag is = " + myTag)
    }
    doLast {
        renameFiles()
    }
}

task downloadAndConfigureMavenMetaData {
    if (project.hasProperty("myTag")) {
        def get = new URL("https://maven.mapsindoors.com/com/mapspeople/mapsindoors/mapsindoorsutils/maven-metadata.xml").openConnection()
        def getResponse = get.getResponseCode()
        println(getResponse)
        if (getResponse.equals(200)) {
            File xmlFile = file('maven-metadata.xml')
            xmlFile.setText("")
            xmlFile.renameTo("maven-metadata.xml")
            xmlFile.append(get.inputStream)
            def metadata = new XmlParser().parse(xmlFile)

            metadata.each {
                if (it.name().equals("version")) {
                    it.setValue(myTag)
                }
                if (it.name().equals("versioning")) {
                    it.each {
                        if (it.name().equals("latest")) {
                            it.setValue(myTag)
                        }
                        if (it.name().equals("release")) {
                            it.setValue(myTag)
                        }
                        if (it.name().equals("versions")) {
                            it.appendNode("version", myTag)
                        }
                        if (it.name().equals("lastUpdated")) {
                            Date date = new Date(System.currentTimeMillis())
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyddMMHHmmss")
                            it.setValue(dateFormat.format(date))
                        }
                    }
                }
            }
            xmlFile.withWriter {
                def printer = new XmlNodePrinter(new PrintWriter(it))
                printer.preserveWhitespace = true
                printer.print(metadata)
            }
        }
    }
}

publishing {
    if (project.hasProperty("myTag")) {
        mVersionName = myTag
    }
    publications {
        // Creates a Maven publication called "release".
        release(MavenPublication) {
            // You can then customize attributes of the publication as shown below
            pom {

                name = "mapsindoorsutils"
                description = "In order to make it easier to work with the appearance of special icons on the MapsIndoors map, we are releasing some rendering helpers in a Utility Library for each MapsIndoors platform. We don’t want to force an app into a specific visualization, so the helpers create a sensible default, with a few options for configuration. If a developer is not happy with defaults or the ways it can be configured, it is possible to create a rendering from the scratch or create a modified rendering with this source code as a starting point."
                url = "https://github.com/MapsIndoors/MapsIndoorsUtils"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "mapspeople"
                        name = "MapsPeople"
                        email = "mail@mapspeople.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/mapsindoors/mapsindoorsutils.git"
                    developerConnection = "scm:git:ssh://github.com:mapsindoors/mapsindoorsutils.git"
                    url = "http://github.com/mapsindoors/mapsindoorsutils/android"
                }
            }
            groupId = 'com.mapspeople.mapsindoors'
            artifactId = 'mapsindoorsutils'
            version = mVersionName
        }
        // Creates a Maven publication called “debug”.
        debug(MavenPublication) {

            groupId = 'com.mapspeople.mapsindoors'
            artifactId = 'mapsindoorsutils-debug'
            version = mVersionName
        }
    }
}

def renameFiles() {
    copy {
        from('build/outputs/aar'){
            include('mapsindoorsutils-release.aar')
            rename('mapsindoorsutils-release.aar', "mapsindoorsutils-"+ mVersionName + ".aar")
        }

        from('build/publications/release') {
            include('pom-default.xml')
            rename('pom-default.xml', "mapsindoorsutils-" + mVersionName + ".pom")
        }
        into('build/outputs/aar')
    }
}
